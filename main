#!/bin/bash
##____  _                      _      
#|  _ \| |__   ___   ___ _ __ (_)_  __
#| |_) | '_ \ / _ \ / _ \ '_ \| \ \/ /
#|  __/| | | | (_) |  __/ | | | |>  < 
#|_|   |_| |_|\___/ \___|_| |_|_/_/\_\
#                                     
# -*- coding: utf-8 -*-
# NOTE: Firstly I create some switches available
# when you run the script to avoid being asked
# but no worries if you just run the script with no arguments
# it will ask you for input. For example you can choose
# window manager shell etc.
# Full install only work for arch based systems
# But basic Install should work for any systemctl
# Convinient way to quickly get my config files on a new system

# NOTE: Source Variables and all functions
# So we can get all my functions
# I wrote them in seperate files to try and stay organized
for source in $(ls functions | xargs -n1) ; do
      source functions/$source
done

for source in $(ls variables | xargs -n1) ; do
      source variables/$source
done

# NOTE: Some switches that are available
# -c for basic install (Basically just terminal applications and my config files)
# -f for full install (Here you get to choose an Window Manager too and gets some other things)
# -w for window manager
# -s for shell
# -d for just my dotfiles,zsh,tmux and starship prompt (good for a server)
# -n for no config files (useful if you already have config files you want to use and dont want to overwrite)

# case statement that enables all available choices
while getopts ":w:s:cfdnhe" opt; do
  case ${opt} in
    c)
     INSTALL_TYPE=basic
     echo "${BLUE}You choose basic install"
     sleep 1
     tput reset
     ;;
    f)
     INSTALL_TYPE=full
     echo "${BLUE}You choose full install"
     sleep 1
     tput reset
     ;;
    d)
     DOTFILES_ONLY="y"
     echo "${BLUE}You choose to only get my dotfiles"
     sleep 2
     tput reset
     ;;
    n)
     NO_CONFIG="y"
     ;;
    e)
     echo "${BLUE}You choose to install emacs"
     INSTALL_EMACS="yes"
     sleep 1
     ;;
    h) 
      case_help
      exit 1
     ;;
    \?)
      case_text
      exit 1
      ;;
    w)
      case ${OPTARG} in
        "hyprland" )
         WINDOW_MANAGER="$OPTARG"
         [ "$INSTALL_TYPE" != "full" ] && error "Need to be used with the -f switch"
         echo "${BLUE}You choose to install hyprland"
         sleep 2
         tput reset
          ;;
        "qtile" )
         WINDOW_MANAGER="$OPTARG"
         [ "$INSTALL_TYPE" != "full" ] && error "Need to be used with the -f switch"
         echo "${BLUE}You choose to install qtile"
         sleep 2
         tput reset
          ;;
         "awesome" )
         WINDOW_MANAGER="$OPTARG"
         [ "$INSTALL_TYPE" = "full" ] && error "Need to be used with the -f switch"
         echo "${BLUE}You choose to install awesome"
         sleep 2
         tput reset
          ;;

        *)
           echo "${RED}:Invalid value. Please select hyperland, qtile, or awesome."
           exit 1
          ;;
      esac
      ;;
    s)
      case ${OPTARG} in
        "zsh" )
         SHELL_CHOICE="$OPTARG"
         echo "${BLUE}You choose zsh"
         sleep 2
          ;;
        "bash" )
         SHELL_CHOICE="$OPTARG"
         echo "${BLUE}You choose bash"
         sleep 2
          ;;
        "fish" )
        SHELL_CHOICE="$OPTARG"
         echo "${BLUE}You choose fish"
         sleep 2
          ;;
        *)
          echo "${RED}:Invalid value. Please select zsh, bash, or fish."
          exit 1
          ;;
      esac
      ;;
    \?)
         case_text
         exit 1
      ;;
    :)
         case_text
         exit 1
      ;;
  esac

done


# NOTE: Install fzf and dialog if not installed
echo "${GREEN}#####################################################"
echo "## Installing 'dialog' and 'fzf' if not installed ##"
echo "#####################################################"
sleep 1;clear
tput reset

# detects which package manager you are using
command_exist pacman && sudo pacman -Syy --needed --noconfirm dialog fzf zsh 
command_exist apt && sudo apt install -y dialog fzf zsh 
command_exist dnf && sudo dnf install -y  dialog fzf zsh 

# Welcome Message
welcome ; clear

# Asks you one last time if you really wanna continue
Lastchance ; clear

# Asks what kind of install you want if you
# Didn't use -c or -f
[ -z "$INSTALL_TYPE" ] && do_settings ; clear

if [ "$INSTALL_TYPE" = "full" ] ; then

    # Leaves if you dont have arch system
    command_exist pacman || error "${RED}You dont Run arch..."
    # asks if you want to install emacs
    [ -z "$INSTALL_EMACS" ] && do_doom ; clear

fi

# NOTE: When using -d we will exit here
if [ "$DOTFILES_ONLY" = "y" ] ; then

    # Runs the dotfiles script which clones my dotfiles repo
    # and moves all my configuration files to home
    echo "${GREEN}#########################################################"
    echo "## Getting all my config files and moving them to home ##"
    echo "#########################################################"
    sleep 2
    tput reset
    install_config

    # Everything is done leaving the script
    exit

else

     # Runs the dotfiles script which clones my dotfiles repo
     # and moves all my configuration files to home
     [ "$NO_CONFIG" = "y" ] || echo "${GREEN}#########################################################"
     [ "$NO_CONFIG" = "y" ] || echo "## Getting all my config files and moving them to home ##"
     [ "$NO_CONFIG" = "y" ] || echo "#########################################################"

     sleep 2

     tput reset

     # NOTE: Install my dotfiles unless you used -n
     [ "$NO_CONFIG" = "y" ] || install_config

fi

sleep 1;clear

# If you didn't choose window manager and choose full install
# Then it will ask you which one you want to install
if [ "$INSTALL_TYPE" = "full" ] ; then

     [ -z "$WINDOW_MANAGER" ] && do_windowmanager

fi

clear

# If you didnt choose shell then it will ask you
[ -z "$SHELL_CHOICE" ] && do_shell

clear

# Asks you which default browser you want
# NOTE: currently disabled feature cause its kinda buggy
# [ "$INSTALL_TYPE" = "full" ] && do_browser


# Just making some home folders cause why notepad
# Making Documents,Downloads,Pictures and Videos
# If they dont already exist
echo "${GREEN}################################"
echo "## Making common user folders ##"
echo "################################"
tput reset

home_folders

sleep 1;clear

# Installs oh-my-tmux which is a plugin manager for tmux
# Which I really enjoy to use
echo "${GREEN}############################"
echo "## Installing oh my tmux ##"
echo "###########################"
tput reset

install_tmux

sleep 1;clear

clear


# Installs pfetch from source cloning the repo
# and runs make install. You can find the function under
# function directory called install
echo "${GREEN}###################################"
echo "## installing pfetch from source ##"
echo "###################################"
tput reset

# only installs if pfetch is not installed
command_exist pfetch || install_pfetch

sleep 1; clear


# Install base-devel if not installed on arch based systems
command_exist pacman && sudo pacman -S --needed --noconfirm base-devel

clear

# Installs paru aur helper if its not installed
if command_exist pacman ; then
    if not command_exist paru ; then

       echo "${GREEN}#####################"
       echo "## installing paru ##"
       echo "#####################"
       sleep 2
       tput reset

       clear
    fi

    # only installs if paru is not installed
    command_exist paru || install_paru && echo "Paru is installed"
fi


if [ "$INSTALL_TYPE" = "basic" ] ; then

   command_exist pacman && install_pacman_base

   clear

elif [ "$INSTALL_TYPE" = "full" ] ; then

    command_exist pacman &&  install_pacman_full

    clear

fi

sleep 2

clear

# Change default shell
sudo usermod -s "/usr/bin/$SHELL_CHOICE" "$USER"
clear

# Install neovim from source on debian based system
if command_exist apt ; then

    command_exist nvim || echo "${GREEN}###################################"
    command_exist nvim || echo "## installing neovim from source ##"
    command_exist nvim || echo "###################################"
    tput reset

    command_exist nvim || install_nvim
    sleep 1;clear
fi

# If you did choose basic install then the script will exit herre
[ "$INSTALL_TYPE" = "basic" ] && exit

clear

# Clone my wallpaper repository
[ "$INSTALL_TYPE" = "full" ] && wallpaper

clear

# makes $HOME/.local/share if it doesnt exist already
[ -d "$HOME/.local/share" ] || mkdir -p "$HOME/.local/share"


# installs my font that I need for for my configs
# I store them in one github repo so it is very easy to grab them
echo "${GREEN}######################"
echo "## installing fonts ##"
echo "######################"
install_fonts

tput reset

clear

# If you choose qtile then it will go and do things thats specific for
# qtile and xorg this is important because hyprland is based on wayland
# so the dependencies will be diffrent
if [ "$WINDOW_MANAGER" = "qtile" ] ; then

    # Making a backup if you already have aqtile config
   [ -d "$HOME/.config/qtile" ] && mv "$HOME/.config/qtile" "$HOME/.config/qtile.bak"

   # clones my qtile branch
   git clone -b qtile https://github.com/phoenix988/dotfiles.git "$HOME/.config/qtile"

   paru -S --needed --noconfirm  qtile-extras xorg-xrandr picom

   # Only installs qtile if needed
   if command_exist qtile ; then

         echo "${YELLOW}Qtile is already installed"
         sleep 1
         tput reset

   else

         echo "${GREEN}######################"
         echo "## installing qtile ##"
         echo "######################"
         paru -S --needed --noconfirm qtile

         tput reset
   fi

   clear

   # If slock is installed it wont install it
   if command_exist slock ; then

         echo "${YELLOW}Slock is already installed"
         sleep 1;clear
         tput reset
   else
         echo "${GREEN}##################################"
         echo "## installing slock from source ##"
         echo "##################################"
         sleep 1;clear
         tput reset

         install_slock
   fi

   clear

# installs hyprland and dependencies if you choose it
elif [ "$WINDOW_MANAGER" = "hyprland" ] ; then

   # Installs some packages needed for my hyprland config
   paru -S --needed --noconfirm waybar-hyprland-git swaylock swaybg grim wofi awesome-terminal-fonts adobe-source-code-pro-fonts ttf-jetbrains-mono xdg-desktop-portal-hyprland-git wlogout \
       pyprland hyprlock

   sleep 1;clear

   git clone https://github.com/phoenix988/hyprland.git $HOME/.config/hypr

   sleep 1;clear

   # Only installs qtile if needed
   if command_exist Hyprland ; then

         echo "${YELLOW}Hyprland is already installed"
         sleep 1
         tput reset

   else
         # Installs hyprland
         echo "${GREEN}#########################"
         echo "## installing hyprland ##"
         echo "#########################"

         sleep 1
         # will exit if hyprlands fails to install
         paru -S --needed --noconfirm hyprland || error "failed to install hyprland" ; clear

         tput reset
   fi

   clear

# installs awesome if you choose it
elif [ "$WINDOW_MANAGER" = "awesome" ] ; then

   echo "${GREEN}########################"
   echo "## installing awesome ##"
   echo "########################"

   # installs some dependencies
   paru -S --needed --noconfirm awesome lain rofi xorg-xrandr picom awesome-terminal-fonts adobe-source-code-pro-fonts ttf-jetbrains-mono

   git clone https://github.com/phoenix988/awesome.git $HOME/.config/awesome

   # If slock is installed it wont install it
   if command_exist slock ; then

         echo "${YELLOW}Slock is already installed"
         sleep 1;clear
         tput reset
   else
         echo "${GREEN}##################################"
         echo "## installing slock from source ##"
         echo "##################################"
         sleep 1;clear
         tput reset

         install_slock
   fi

   clear


fi

clear

# installs my sddm theme
echo "{$GREEN}###########################"
echo "## installing sddm theme ##"
echo "###########################"

clear;sddm_theme;clear
sleep 1
tput reset

# installs some gtk themes I like to use
echo "${GREEN}##########################"
echo "## installing gtk theme ##"
echo "##########################"
sleep 1

tput reset

# runs the gtk function
GTK_theme

sleep 2;clear

tput reset

# Installs doom emacs
[ "$INSTALL_EMACS" = "yes" ] && install_doom ; clear

# enables sddm on boot
sudo systemctl enable sddm

sleep 1;clear

# asks if you want to restart
do_restart

sleep 2;clear
echo "${GREEN}#########################"
echo "## Everything is done! ##"
echo "#########################"
