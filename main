#!/bin/bash
##____  _                      _      
#|  _ \| |__   ___   ___ _ __ (_)_  __
#| |_) | '_ \ / _ \ / _ \ '_ \| \ \/ /
#|  __/| | | | (_) |  __/ | | | |>  < 
#|_|   |_| |_|\___/ \___|_| |_|_/_/\_\
#                                     
# -*- coding: utf-8 -*-
# Can directly make a choice -c for basic install
# and -f for full install

# -w for window manager
# -s for shell
# -c for basic install
# -f for full install
while getopts ":w:s:cf" opt; do
  case ${opt} in
    c)
     INSTALL_TYPE=basic
     ;;
    f)
     INSTALL_TYPE=full
     ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    w )
      case ${OPTARG} in
        "hyprland" )
         WINDOW_MANAGER="$OPTARG"
          ;;
        "qtile" )
         WINDOW_MANAGER="$OPTARG"
          ;;
        * )
          echo "Invalid value. Please select hyperland, qtile, or xmonad."
          exit 1
          ;;
      esac
      ;;
    s )
      case ${OPTARG} in
        "zsh" )
         SHELL_CHOICE="$OPTARG"
          ;;
        "bash" )
         SHELL_CHOICE="$OPTARG"
          ;;
        "fish" )
        SHELL_CHOICE="$OPTARG"
          ;;
        * )
          echo "Invalid value. Please select zsh, bash, or fish."
          exit 1
          ;;
      esac
      ;;
    \? )
         echo "Invalid option: -$OPTARG. Please select hyperland, qtile, or xmonad" 1>&2
         echo "-w (hyprland, qtile, xmonad)"
         echo "-s (zsh, bash, fish)"
         exit 1
      ;;
    : )
         echo "Invalid option: -$OPTARG requires an argument." 1>&2
         echo "-w (hyprland, qtile, xmonad)"
         echo "-s (zsh, bash, fish)"
         exit 1
      ;;
  esac

done


exit
# Gets the hostname of the machine
hostname=$(cat /etc/hostname &> /dev/null)

# Source Variables and all functions
for source in $(ls functions | xargs -n1) ; do
      source functions/$source
done

for source in $(ls variables | xargs -n1) ; do
      source variables/$source
done


# Install fzf and dialog if its needed
echo "#####################################################"
echo "## Installing 'dialog' and 'fzf' if not installed ##"
echo "#####################################################"

sleep 1;clear

command_exist pacman && sudo pacman -Syyu --needed --noconfirm dialog fzf || error "failed to install fzf"

sleep 1;clear

# Welcome Message
welcome ; clear

# Asks what kind of install you want if you
# Didn't use -c or -f
[ -z "$INSTALL_TYPE" ] && do_settings ; clear

Lastchance ; clear

# If you didn't choocse window manager and choose full install
# Then it will ask you which one you want to install
if [ "$INSTALL_TYPE" = "full" ] ; then

      [ -z "$WINDOW_MANAGER" ] && do_windowmanager

fi

[ "$INSTALL_TYPE" = "full" ] && do_browser

    
echo "################################"
echo "## Making common user folders ##"
echo "################################" 

home_folders || error "Failed to create home folders"

clear

echo "############################"
echo "## Installing oh my tmux ##"
echo "###########################"

install_oh_my_tmux || error "failed to install oh my tmux"

clear

echo "###################################"
echo "## installing pfetch from source ##"
echo "###################################"
command_exist pacman && sudo pacman -S --needed --noconfirm base-devel

install_pfetch 

if [ "$INSTALL_TYPE" = "basic" ] ; then

   command_exist pacman && install_pacman_base

        clear
   
fi


echo "#########################################################"
echo "## Getting all my config files and moving them to home ##"
echo "#########################################################"

cd ./scripts

# Runs the dotfiles script
./dotfiles.sh 

cd ..

clear

# If you didnt choose shell then it will ask you
[ -z "$SHELL_CHOICE" ] && do_shell

clear

# If you did choose basic install then the script will exit herre
[ "$INSTALL_TYPE" = "basic" ] && exit


# Installs packages 
if command_exist pacman; then      

    install_pacman_full

    clear

fi    

clear

if [ $WINDOW_MANAGER = "qtile" ] ; then

if command_exist qtile ; then

      echo "Qtile is already installed"

else

      echo "######################"
      echo "## installing qtile ##"
      echo "######################"

      install_qtile || error "failed to install qtile" ; clear

fi

clear

if command_exit slock ; then

      echo "Slock is already installed"

else
      echo "##################################"
      echo "## installing slock from source ##"
      echo "##################################"

      install_slock || error "failed to install slock" ; clear

fi


fi
